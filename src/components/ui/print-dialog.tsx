
'use client';

import React, { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
  DialogTrigger,
  DialogClose,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Switch } from '@/components/ui/switch';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Checkbox } from '@/components/ui/checkbox';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Printer } from 'lucide-react';
import { Input } from './ui/input';
import type { Article, BookContent, Chapter } from '@/lib/data-service';

export function PrintDialog({ children, articleInfo }: { 
    children: React.ReactNode; 
    articleInfo: { book: BookContent; chapter: Chapter; article: Article } | null 
}) {
  const [open, setOpen] = useState(false);
  const [isMounted, setIsMounted] = useState(false);

  // State for settings
  const [includeFootnotes, setIncludeFootnotes] = useState(true);
  const [layout, setLayout] = useState('single');
  
  const [headerOptions, setHeaderOptions] = useState({
      include: true,
      bookTitle: true,
      articleTitle: true,
      chapter: true,
      author: false,
      date: false,
      pageNumber: true,
  });
  const [headerCustomNote, setHeaderCustomNote] = useState('');
  
  const [footerOptions, setFooterOptions] = useState({
      include: true,
      bookTitle: false,
      pageNumber: true,
      author: false,
  });
  const [footerCustomNote, setFooterCustomNote] = useState('Generated by VakyaVerse');

  useEffect(() => {
    setIsMounted(true);
  }, []);
  
  const handleHeaderOptionChange = (key: keyof typeof headerOptions, value: boolean) => {
    setHeaderOptions(prev => ({...prev, [key]: value}));
  };
  
  const handleFooterOptionChange = (key: keyof typeof footerOptions, value: boolean) => {
    setFooterOptions(prev => ({...prev, [key]: value}));
  };

  const handlePrint = () => {
    if (!isMounted) return;
    if (!articleInfo) {
      alert("Article data is not loaded. Please wait a moment.");
      return;
    }
    
    const contentNode = document.querySelector('.printable-content');
    if (!contentNode) {
      alert("Could not find printable content. Please ensure you are viewing an article.");
      return;
    }
    const contentToPrint = contentNode.cloneNode(true) as HTMLElement;

    // Clean up nodes based on settings
    if (!includeFootnotes) {
      contentToPrint.querySelector('.footnotes-container')?.remove();
      contentToPrint.querySelectorAll('sup[data-type="footnote"], sup[data-type="specialnote"]').forEach(el => el.remove());
    }
    
    const getHeaderText = () => {
      if (!headerOptions.include) return '';
      const parts = [];
      if (headerOptions.bookTitle) parts.push(articleInfo.book.bookName);
      if (headerOptions.chapter) parts.push(articleInfo.chapter.name);
      if (headerOptions.articleTitle) parts.push(articleInfo.article.title);
      if (headerCustomNote) parts.push(headerCustomNote);
      return parts.join(' | ');
    }
    
    const getFooterText = () => {
       if (!footerOptions.include) return '';
       const parts = [];
       if (footerOptions.bookTitle) parts.push(articleInfo.book.bookName);
       if (footerOptions.author && articleInfo.article.author) parts.push(articleInfo.article.author.name);
       if (footerCustomNote) parts.push(footerCustomNote);
       return parts.join(' | ');
    }

    const headerContent = getHeaderText().replace(/"/g, "'");
    const footerContent = getFooterText().replace(/"/g, "'");

    let printCss = `
      body { 
        font-family: 'Literata', serif; 
        line-height: 1.6; 
        color: #000;
        background: #fff;
      }
      .prose-content, .note-context, .printable-content { 
        all: initial; 
        font-family: 'Literata', serif; 
        color: #000;
      }
      h1,h2,h3,h4,h5,h6 { font-family: 'Literata', serif; break-after: avoid; color: #000; margin-top: 1.5em; margin-bottom: 0.5em; }
      h1 { font-size: 24pt; }
      h2 { font-size: 18pt; }
      h3 { font-size: 14pt; }
      p { margin-top: 0; margin-bottom: 1em; }
      blockquote { border-left: 2px solid #ccc; padding-left: 1em; margin-left: 0; font-style: italic; color: #555; }
      .font-devanagari, [data-sanskrit-text="true"] { font-family: 'Adishila', serif !important; }
      a { text-decoration: none; color: inherit; }
      sup { vertical-align: super; font-size: smaller; }
      .footnotes-container { page-break-before: always; }
      img { max-width: 100% !important; }
      .no-print { display: none !important; }
      
      @page {
        size: A4;
        margin: 1in;
        @top-center {
          content: "${headerContent}";
          font-size: 9pt;
          color: #666;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
        }
        @bottom-center {
          content: "${footerContent} ${footerOptions.pageNumber ? ' | Page ' : ''}${footerOptions.pageNumber ? 'counter(page)' : ''}";
          font-size: 9pt;
          color: #666;
        }
      }
    `;

    if (layout === 'two') {
      printCss += `
        .prose-content { 
            column-count: 2; 
            column-gap: 2.5rem;
        } 
        h1, h2, h3, h4, h5, h6, figure, table, .footnotes-container { 
            column-span: all;
        }`;
    }
    
    // Open a new window for the print preview
    const printWindow = window.open('', '_blank');
    if (!printWindow) {
      alert("Please allow pop-ups to print this document.");
      return;
    }

    printWindow.document.write(`
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <title>Print Preview - ${articleInfo.article.title}</title>
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
          <link href="https://fonts.googleapis.com/css2?family=Adishila:wght@400;700&family=Inter:wght@400;500;600;700&family=Literata:ital,opsz,wght@0,7..72,400;1,7..72,400;0,7..72,700;1,7..72,700&display=swap" rel="stylesheet" />
          <style>
            ${printCss}
            @media print {
              .print-button-container {
                display: none;
              }
            }
            .print-button-container {
                position: fixed;
                top: 1rem;
                right: 1rem;
                background: white;
                padding: 0.5rem;
                border-radius: 6px;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                border: 1px solid #ccc;
            }
            .print-button-container button {
                background-color: #333;
                color: white;
                border: none;
                padding: 8px 16px;
                font-family: sans-serif;
                font-size: 14px;
                border-radius: 4px;
                cursor: pointer;
            }
          </style>
        </head>
        <body>
          <div class="print-button-container no-print">
             <button onclick="window.print()">Print Document</button>
          </div>
          <div class="printable-content">
            ${contentToPrint.innerHTML}
          </div>
        </body>
      </html>
    `);

    printWindow.document.close();
    
    setTimeout(() => {
        printWindow.print();
    }, 500);

    setOpen(false);
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>{children}</DialogTrigger>
      <DialogContent className="sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle>Print Settings</DialogTitle>
          <DialogDescription>
            Configure the layout and content for your printed document.
          </DialogDescription>
        </DialogHeader>
        <ScrollArea className="max-h-[60vh] pr-6">
          <div className="space-y-6 py-4">
            <div className="space-y-4">
              <h4 className="font-semibold text-lg">Content Inclusion</h4>
              <div className="flex items-center justify-between">
                <Label htmlFor="include-footnotes">Include Footnotes Section</Label>
                <Switch id="include-footnotes" checked={includeFootnotes} onCheckedChange={setIncludeFootnotes} />
              </div>
            </div>

            <Separator />

            <div className="space-y-4">
                <h4 className="font-semibold text-lg">Layout & Formatting</h4>
                 <div className="space-y-2">
                    <Label>Text Layout</Label>
                    <RadioGroup value={layout} onValueChange={setLayout} className="flex gap-4">
                        <div className="flex items-center space-x-2"><RadioGroupItem value="single" id="layout-single" /><Label htmlFor="layout-single">Single Column</Label></div>
                        <div className="flex items-center space-x-2"><RadioGroupItem value="two" id="layout-two" /><Label htmlFor="layout-two">Two Columns</Label></div>
                    </RadioGroup>
                </div>
            </div>

            <Separator />
            
            <div className="space-y-4">
                <h4 className="font-semibold text-lg">Header & Footer</h4>
                 <div className="flex items-center justify-between">
                    <Label htmlFor="include-header">Include Header</Label>
                    <Switch id="include-header" checked={headerOptions.include} onCheckedChange={(val) => handleHeaderOptionChange('include', val)} />
                </div>
                 <div className="grid grid-cols-2 gap-2 pl-6">
                    <div className="flex items-center space-x-2"><Checkbox id="h-book" checked={headerOptions.bookTitle} onCheckedChange={(val) => handleHeaderOptionChange('bookTitle', val === 'indeterminate' ? false : val)} disabled={!headerOptions.include} /><Label htmlFor="h-book">Book Title</Label></div>
                    <div className="flex items-center space-x-2"><Checkbox id="h-article" checked={headerOptions.articleTitle} onCheckedChange={(val) => handleHeaderOptionChange('articleTitle', val === 'indeterminate' ? false : val)} disabled={!headerOptions.include} /><Label htmlFor="h-article">Article Title</Label></div>
                    <div className="flex items-center space-x-2"><Checkbox id="h-chapter" checked={headerOptions.chapter} onCheckedChange={(val) => handleHeaderOptionChange('chapter', val === 'indeterminate' ? false : val)} disabled={!headerOptions.include} /><Label htmlFor="h-chapter">Chapter</Label></div>
                    <div className="flex items-center space-x-2"><Checkbox id="h-author" checked={headerOptions.author} onCheckedChange={(val) => handleHeaderOptionChange('author', val === 'indeterminate' ? false : val)} disabled={!headerOptions.include} /><Label htmlFor="h-author">Author Name</Label></div>
                </div>
                <Input placeholder="Custom Header Note..." className="mt-2 ml-6" value={headerCustomNote} onChange={(e) => setHeaderCustomNote(e.target.value)} disabled={!headerOptions.include} />
                
                <div className="flex items-center justify-between pt-4">
                    <Label htmlFor="include-footer">Include Footer</Label>
                    <Switch id="include-footer" checked={footerOptions.include} onCheckedChange={(val) => handleFooterOptionChange('include', val)} />
                </div>
                 <div className="grid grid-cols-2 gap-2 pl-6">
                    <div className="flex items-center space-x-2"><Checkbox id="f-book" checked={footerOptions.bookTitle} onCheckedChange={(val) => handleFooterOptionChange('bookTitle', val === 'indeterminate' ? false : val)} disabled={!footerOptions.include} /><Label htmlFor="f-book">Book Title</Label></div>
                    <div className="flex items-center space-x-2"><Checkbox id="f-page" checked={footerOptions.pageNumber} onCheckedChange={(val) => handleFooterOptionChange('pageNumber', val === 'indeterminate' ? false : val)} disabled={!footerOptions.include} /><Label htmlFor="f-page">Page Number</Label></div>
                    <div className="flex items-center space-x-2"><Checkbox id="f-author" checked={footerOptions.author} onCheckedChange={(val) => handleFooterOptionChange('author', val === 'indeterminate' ? false : val)} disabled={!footerOptions.include} /><Label htmlFor="f-author">Author</Label></div>
                </div>
                 <Input placeholder="Custom Footer Note..." className="mt-2 ml-6" value={footerCustomNote} onChange={(e) => setFooterCustomNote(e.target.value)} disabled={!footerOptions.include} />
            </div>
          </div>
        </ScrollArea>
        <DialogFooter>
            <DialogClose asChild><Button type="button" variant="ghost">Cancel</Button></DialogClose>
            <Button onClick={handlePrint}><Printer className="mr-2 h-4 w-4" /> Print</Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
